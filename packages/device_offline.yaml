---
sensor:
  - platform: 'template'
    sensors:
      unavailable_devices:
        friendly_name: 'Unavailable Devices'
        unique_id: 'dea4dcc4-d18e-4954-a0af-64879b6c2e39'
        unit_of_measurement: 'devices'
        value_template: >-
          {% set unavailable = namespace(entities=[], devices={}) %}
          {% set unavailable.entities = state_attr('sensor.unavailable_entities', 'entities') | default([]) %}

          {% for entity in unavailable.entities %}
          {%   set device = device_id(entity) %}
          {%   if device is not none %}
          {%     if device not in unavailable.devices %}
          {%       set unavailable.devices = dict(unavailable.devices, **{ device: [] }) %}
          {%     endif %}
          {%     set unavailable.devices = dict(unavailable.devices, **{ device: unavailable.devices[device] + [entity] }) %}
          {%   endif %}
          {% endfor %}

          {{ unavailable.devices | list | count }}
        availability_template: >-
          {{ states('sensor.unavailable_entities') != 'unavailable' }}
        icon_template: >-
          {% if is_state('sensor.unavailable_devices', '0') %}
            mdi:check-circle
          {% else %}
            mdi:alert-circle
          {% endif %}
        attribute_templates:
          devices: >-
            {% set unavailable = namespace(entities=[], devices={}) %}
            {% set unavailable.entities = state_attr('sensor.unavailable_entities', 'entities') | default([]) %}

            {% for entity in unavailable.entities %}
            {%   set device = device_id(entity) %}
            {%   if device is not none %}
            {%     if device not in unavailable.devices %}
            {%       set unavailable.devices = dict(unavailable.devices, **{ device: [] }) %}
            {%     endif %}
            {%     set unavailable.devices = dict(unavailable.devices, **{ device: unavailable.devices[device] + [entity] }) %}
            {%   endif %}
            {% endfor %}

            {{ unavailable.devices | list }}

      unavailable_entities:
        friendly_name: 'Unavailable Entities'
        unique_id: '5c27c9c2-bee0-461f-bb08-3fc5abde1340'
        unit_of_measurement: 'entities'
        value_template: >-
          {{
            states | selectattr('state', 'in', ['unavailable', 'unknown']) |
            rejectattr('domain', 'eq', 'group') |
            rejectattr('entity_id', 'in', state_attr('group.ignored_entities', 'entity_id')) |
            map(attribute='entity_id') | list | count
          }}
        icon_template: >-
          {% if is_state('sensor.unavailable_entities', '0') %}
            mdi:check-circle
          {% else %}
            mdi:alert-circle
          {% endif %}
        attribute_templates:
          entities: >-
            {{
              states | selectattr('state', 'in', ['unavailable', 'unknown']) |
              rejectattr('domain', 'eq', 'group') |
              rejectattr('entity_id', 'in', state_attr('group.ignored_entities', 'entity_id')) |
              map(attribute='entity_id') | list
            }}

group:
  ignored_entities:
    entities:
      - 'media_player.bedroom_2_speaker'
      - 'media_player.hallway_speaker'
      - 'media_player.kitchen_display'
      - 'media_player.living_room_speaker'
      - 'media_player.living_room_tv'
      - 'sensor.unavailable_devices'
      - 'sensor.unavailable_entities'
      - 'vacuum.downstairs'

automation:
  - alias: 'Device Offline'
    id: '7fa5aace-5294-4181-a6f3-4720b1fe1fde'
    trigger:
      platform: 'state'
      entity_id:
        - 'sensor.unavailable_devices'
        - 'sensor.unavailable_entities'
    condition:
      condition: 'numeric_state'
      entity_id: 'sensor.uptime'
      value_template: '(now() - state.state | as_datetime).seconds'
      above: 120
    action:
      choose:
        conditions:
          condition: 'numeric_state'
          entity_id: 'sensor.unavailable_entities'
          below: 1
        sequence:
          service: 'notify.mobile_app_josh_phone'
          data:
            message: 'clear_notification'
            data:
              tag: 'devices-offline'
      default:
        service: 'notify.mobile_app_josh_phone'
        data:
          title: 'Device(s) Offline'
          message: >-
            {{ states('sensor.unavailable_devices') }} devices are offline.

            - {{ expand(state_attr('sensor.unavailable_entities', 'entities')) | join("\n- ") }}
          data:
            tag: 'devices-offline'
    mode: 'restart'

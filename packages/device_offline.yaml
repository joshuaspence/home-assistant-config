---
template:
  - trigger:
      - platform: 'event'
        event_type: 'entity_registry_updated'
      - platform: 'state'
        entity_id: 'binary_sensor.zigbee2mqtt_state'
      - platform: 'time_pattern'
        minutes: '*'
    sensor:
      - name: 'Unavailable Entities'
        unique_id: '5c27c9c2-bee0-461f-bb08-3fc5abde1340'
        state: >-
          {{
            states |
            selectattr('state', 'eq', 'unavailable') |
            rejectattr('domain', 'eq', 'group') |
            rejectattr('entity_id', 'in', integration_entities('group')) |
            rejectattr('entity_id', 'in', state_attr('group.ignored_entities', 'entity_id')) |
            list | count
          }}
        unit_of_measurement: 'entities'
        icon: '{{ is_state("sensor.unavailable_entities", "0") | iif("mdi:check-circle", "mdi:alert-circle") }}'
        attributes:
          entities: >-
            {{
              states |
              selectattr('state', 'eq', 'unavailable') |
              rejectattr('domain', 'eq', 'group') |
              rejectattr('entity_id', 'in', integration_entities('group')) |
              rejectattr('entity_id', 'in', state_attr('group.ignored_entities', 'entity_id')) |
              map(attribute='entity_id') | list
            }}
  - trigger:
      - platform: 'event'
        event_type: 'device_registry_updated'
      - platform: 'state'
        entity_id: 'sensor.unavailable_entities'
    sensor:
      - name: 'Unavailable Devices'
        unique_id: 'bbeb3c7e-ccf9-4228-b989-65e64b95d88a'
        state: >-
          {{
            state_attr('sensor.unavailable_entities', 'entities') | default([], true) |
            map('device_id') | reject('none') | unique |
            list | count
          }}
        unit_of_measurement: 'devices'
        icon: '{{ is_state("sensor.unavailable_devices", "0") | iif("mdi:lan-connect", "mdi:lan-disconnect") }}'
        availability: '{{ has_value("sensor.unavailable_entities") }}'
        attributes:
          devices: >-
            {% set ns = namespace(devices={}) %}

            {% for entity in state_attr('sensor.unavailable_entities', 'entities') | default([], true) %}
            {%   set device = device_id(entity) %}
            {%   if device is not none %}
            {%     if device not in ns.devices %}
            {%       set ns.devices = dict(ns.devices, **{ device: [] }) %}
            {%     endif %}
            {%     set ns.devices = dict(ns.devices, **{ device: ns.devices[device] + [entity] }) %}
            {%   endif %}
            {% endfor %}

            {{ ns.devices }}
          entities: >-
            {% set ns = namespace(entities=[]) %}

            {% for entity in state_attr('sensor.unavailable_entities', 'entities') | default([], true) %}
            {%   set device = device_id(entity) %}
            {%   if device is none %}
            {%     set ns.entities = ns.entities + [entity] %}
            {%   endif %}
            {% endfor %}

            {{ ns.entities }}

group:
  ignored_entities:
    entities:
      - 'sensor.josh_phone_next_alarm'
      - 'sensor.unavailable_devices'
      - 'sensor.unavailable_entities'

automation:
  - alias: 'Device Offline'
    id: '7fa5aace-5294-4181-a6f3-4720b1fe1fde'
    trigger:
      platform: 'state'
      entity_id: 'sensor.unavailable_devices'
      not_to: 'unavailable'
    action:
      - delay: 5
      - choose:
          conditions:
            - condition: 'numeric_state'
              entity_id: 'sensor.unavailable_devices'
              below: 1
            - condition: 'numeric_state'
              entity_id: 'sensor.unavailable_devices'
              value_template: '{{ state.attributes.entities | count }}'
              below: 1
          sequence:
            service: 'script.mobile_app_clear_notification'
            data:
              target: 'josh_phone'
              tag: 'devices-offline'
        default:
          service: 'script.mobile_app_notify'
          data:
            target: 'josh_phone'
            title: 'Devices Offline'
            subtitle: >-
              {{ states('sensor.unavailable_devices') }} {{ is_state('sensor.unavailable_devices', '1') | iif('device is', 'devices are') }} offline.
            message: >-
              {% for device, entities in state_attr('sensor.unavailable_devices', 'devices').items() -%}
              - {{ device_attr(device, 'name_by_user') | default(device_attr(device, 'name'), true) }}
              {% endfor %}
              {% for entity in state_attr('sensor.unavailable_devices', 'entities') -%}
              - {{ entity }}
              {% endfor %}
            channel: 'Device Offline'
            icon: 'mdi:lan-disconnect'
            persistent: true
            sticky: true
            tag: 'devices-offline'
            url: 'entityId:sensor.unavailable_devices'
    mode: 'restart'
    trace:
      stored_traces: 10

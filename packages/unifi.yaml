---
sensor:
  - platform: 'unifigateway'
    host: 'unifi.spence.network'
    port: 443
    version: 'UDMP-unifiOS'
    username: !secret 'unifi.username'
    password: !secret 'unifi.password'

  # Cloud Key (UniFi OS)
  # TODO: Use a custom integration rather than `sensor.command_line` and `sensor.rest`.
  # TODO: Some of these should be `binary_sensor`s.
  - platform: 'command_line'
    name: 'UniFi Auth Token'

    # States must be less than 256 bytes, so split the token into three parts.
    command: |-
      python - <<EOF
      import json
      import requests
      import urllib3
      from homeassistant.util.yaml import load_yaml

      secrets = load_yaml('secrets.yaml')
      credentials = {
        'username': secrets['unifi.username'],
        'password': secrets['unifi.password'],
      }

      urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
      response = requests.post('https://unifi.spence.network/api/auth/login', data=credentials, verify=False)

      token = response.cookies['TOKEN'].split('.', 2)
      print(json.dumps({i: token[i] for i in range(0, len(token))}))
      EOF
    value_template: '{{ now() }}'
    json_attributes:
      - '0'
      - '1'
      - '2'
    scan_interval: 600

  - platform: 'rest'
    name: 'UniFi Cloud Key Status'
    <<: &unifi_os_api
      resource: 'https://unifi.spence.network/api/system'
      verify_ssl: false
      headers:
        Cookie: 'TOKEN={{ [state_attr("sensor.unifi_auth_token", "0"), state_attr("sensor.unifi_auth_token", "1"), state_attr("sensor.unifi_auth_token", "2")] | join(".") }}'
    value_template: '{{ value_json.devices.unifiOS[0].status }}'
  - platform: 'rest'
    name: 'UniFi Cloud Key Uptime'
    <<: *unifi_os_api
    value_template: '{{ value_json.devices.unifiOS[0].startupTime | as_datetime }}'
    device_class: 'timestamp'
  - platform: 'rest'
    name: 'UniFi Cloud Key CPU'
    <<: *unifi_os_api
    value_template: '{{ (100 * value_json.cpu.currentload) | int }}'
    unit_of_measurement: '%'
  - platform: 'rest'
    name: 'UniFi Cloud Key Memory'
    <<: *unifi_os_api
    value_template: '{{ (100 * (1 - value_json.memory.available / value_json.memory.total)) | round(1) }}'
    unit_of_measurement: '%'
  - platform: 'rest'
    name: 'UniFi Cloud Key Internal Storage'
    <<: *unifi_os_api
    value_template: >-
      {% set storage = value_json.storage | selectattr('type', 'eq', 'emmc') | list %}
      {% set used = storage | map(attribute='used') | sum %}
      {% set size = storage | map(attribute='size') | sum %}
      {{ (100 * used / size) | round(1) }}
    unit_of_measurement: '%'
  - platform: 'rest'
    name: 'UniFi Cloud Key External Storage'
    <<: *unifi_os_api
    value_template: >-
      {% set storage = value_json.storage | selectattr('type', 'eq', 'sdcard') | list %}
      {% set used = storage | map(attribute='used') | sum %}
      {% set size = storage | map(attribute='size') | sum %}
      {{ (100 * used / size) | round(1) }}
    unit_of_measurement: '%'
  - platform: 'rest'
    name: 'UniFi Cloud Key CPU Temperature'
    <<: *unifi_os_api
    value_template: '{{ value_json.cpu.temperature | round(1) }}'
    device_class: 'temperature'
    unit_of_measurement: '°C'
  - platform: 'rest'
    name: 'UniFi Cloud Key Firmware Version'
    <<: *unifi_os_api
    value_template: '{{ value_json.hardware.firmwareVersion }}'
  - platform: 'rest'
    name: 'UniFi Cloud Key Latest Firmware Version'
    <<: *unifi_os_api
    value_template: '{{ value_json.firmware.latest.version }}'
    json_attributes_path: '$.firmware.latest'
    json_attributes:
      - 'version_major'
      - 'version_minor'
      - 'version_patch'
      - 'version_build'

  - platform: 'rest'
    name: 'UniFi Controller State'
    <<: *unifi_os_api
    value_template: '{{ value_json.apps.controllers[0].state }}'
  - platform: 'rest'
    name: 'UniFi Controller Status'
    <<: *unifi_os_api
    value_template: '{{ value_json.apps.controllers[0].status }}'
    json_attributes_path: '$.apps.controllers[0]'
    json_attributes:
      - 'statusMessage'
  - platform: 'rest'
    name: 'UniFi Controller Version'
    <<: *unifi_os_api
    value_template: '{{ value_json.apps.controllers[0].version }}'
    json_attributes_path: '$.apps.controllers[0]'
    json_attributes:
      - 'updateAvailable'
  - platform: 'rest'
    name: 'UniFi Controller Running'
    <<: *unifi_os_api
    value_template: '{{ value_json.apps.controllers[0].isRunning }}'
    json_attributes_path: '$.apps.controllers[0].info'
    json_attributes:
      - 'startedAt'
  - platform: 'rest'
    name: 'UniFi Controller Controller Status'
    <<: *unifi_os_api
    value_template: '{{ value_json.apps.controllers[0].controllerStatus }}'

# TODO: Add switch and access point sensors (see custom-components/sensor.unifigateway#9).
template:
  - sensor:
      - name: 'UniFi Gateway CPU'
        unique_id: 'b6a8b2d0-86b4-4133-b505-8a38057ce05e'
        state: '{{ states.sensor.unifi_gateway_wan.attributes["gw_system-stats"].cpu }}'
        icon: 'mdi:cpu-64-bit'
        unit_of_measurement: '%'
        <<: &wan
          availability: '{{ states.sensor.unifi_gateway_wan is not none and states.sensor.unifi_gateway_wan.attributes["gw_system-stats"] | default({}, true) | count > 0 }}'
      - name: 'UniFi Gateway Memory'
        unique_id: 'cb6a1a8a-4cc0-409e-bd76-80b670a551d4'
        state: '{{ states.sensor.unifi_gateway_wan.attributes["gw_system-stats"].mem }}'
        icon: 'mdi:memory'
        unit_of_measurement: '%'
        <<: *wan
      - name: 'UniFi Gateway Board (CPU) Temperature'
        unique_id: '9ed19cd0-0393-4e07-a0ba-15e166396e6b'
        state: '{{ states.sensor.unifi_gateway_wan.attributes["gw_system-stats"].temps["Board (CPU)"] | trim(" C") }}'
        <<: &temperature
          availability: '{{ states.sensor.unifi_gateway_wan.attributes["gw_system-stats"].temps is mapping }}'
          device_class: 'temperature'
          unit_of_measurement: '°C'
      - name: 'UniFi Gateway Board (PHY) Temperature'
        unique_id: 'f4255d14-5a74-4134-a23e-8a2c1b8b15ae'
        state: '{{ states.sensor.unifi_gateway_wan.attributes["gw_system-stats"].temps["Board (PHY)"] | trim(" C") }}'
        <<: *temperature
      - name: 'UniFi Gateway CPU Temperature'
        unique_id: 'a4b4220c-64b4-49af-87e6-9fa28b55180e'
        state: '{{ states.sensor.unifi_gateway_wan.attributes["gw_system-stats"].temps["CPU"] | trim(" C") }}'
        <<: *temperature
      - name: 'UniFi Gateway PHY Temperature'
        unique_id: '61bdde73-e849-41e2-86fd-a62092af7574'
        state: '{{ states.sensor.unifi_gateway_wan.attributes["gw_system-stats"].temps["PHY"] | trim(" C") }}'
        <<: *temperature
      - name: 'UniFi Gateway Uptime'
        unique_id: '5c30f2d9-ae88-4301-a242-9c17a71611fa'
        state: '{{ now() - timedelta(seconds=states.sensor.unifi_gateway_wan.attributes["gw_system-stats"].uptime | int) }}'
        device_class: 'timestamp'
        <<: *wan

  - sensor:
      - name: 'UniFi WLAN Guests'
        unique_id: 'ad410e0b-0be3-4500-82b9-389698e2e497'
        state: '{{ states.sensor.unifi_gateway_wlan.attributes.num_guest }}'
        <<: &wlan
          availability: '{{ states.sensor.unifi_gateway_wlan is not none }}'
      - name: 'UniFi WLAN Users'
        unique_id: 'da25c64c-f7cb-4165-901d-9e3823d8de6a'
        state: '{{ states.sensor.unifi_gateway_wlan.attributes.num_user }}'
        <<: *wlan

  - sensor:
      - name: 'UniFi Gateway WAN Failover'
        unique_id: 'a6d6d6e8-e159-47ca-b4c7-4f0aa90d1bac'
        availability: '{{ states.sensor.unifi_gateway_wan is not none }}'
        state: >-
          {% if is_state_attr('sensor.unifi_gateway_wan', 'wan_ip', '119.18.8.167') %}
            Primary
          {% elif is_state_attr('sensor.unifi_gateway_wan', 'wan_ip', '10.66.104.16') %}
            Secondary
          {% else %}
            Unknown
          {% endif %}

automation:
  - alias: 'Unifi Alerts'
    id: 'e1448032-b0ca-4b23-a8b1-2c044e441426'
    trigger:
      platform: 'state'
      entity_id: 'sensor.unifi_gateway_alerts'
      from: null
      to: null
    condition: '{{ trigger.from_state.state != "unavailable" }}'
    action:
      choose:
        conditions:
          condition: 'numeric_state'
          entity_id: 'sensor.unifi_gateway_alerts'
          below: 1
        sequence:
          service: 'notify.mobile_app_josh_phone'
          data:
            message: 'clear_notification'
            data:
              tag: 'unifi-alert'
      default:
        service: 'notify.mobile_app_josh_phone'
        data:
          title: 'Unifi Alerts'
          message: >-
            There are {{ trigger.to_state.state }} gateway alerts.

            {% for key, value in trigger.to_state.attributes.items() -%}
            {%   if key | int(-1) != -1 -%}
            - {{ value.msg }}
            {%   endif -%}
            {% endfor %}
          data:
            tag: 'unifi-alert'
    mode: 'restart'

  - alias: 'Unifi Firmware Updates Available'
    id: '4dbd094b-c008-4625-b3b6-7b336954b103'
    trigger:
      platform: 'state'
      entity_id: 'sensor.unifi_gateway_firmware_upgradable'
    condition: '{{ trigger.from_state.state != "unavailable" }}'
    action:
      choose:
        conditions:
          condition: 'numeric_state'
          entity_id: 'sensor.unifi_gateway_firmware_upgradable'
          below: 1
        sequence:
          service: 'persistent_notification.dismiss'
          data:
            notification_id: 'unifi-firmware'
      default:
        service: 'persistent_notification.create'
        data:
          title: 'Unifi Firmware Updates Available'
          message: 'There are {{ trigger.to_state.state }} firmware updates available.'
          notification_id: 'unifi-firmware'
    mode: 'restart'
